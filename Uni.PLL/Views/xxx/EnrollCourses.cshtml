@using Uni.BLL.ModelVM
@model EnrollCourseVM

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enroll courses</title>
    <link rel="stylesheet" href="/Uni.PLL/wwwroot/css/courses.css" />
</head>
<body>
    <div class="selector-container">
        <h2>Course Selection</h2>
        <form id="enrollForm" asp-action="SubmitCourses" method="post">
            @Html.AntiForgeryToken()
            <label for="department">Department</label>
            <select id="department" name="DeptName">
                <option value="" hidden>-- Select Department --</option>
                <option value="Computer">Computer</option>
                <option value="Electrical">Electrical</option>
            </select>

            <label for="level">Level</label>
            <select id="level" name="SelectedYear">
                <option value="" hidden>-- Select Level --</option>
                <option value="1">Level 1</option>
                <option value="2">Level 2</option>
                <option value="3">Level 3</option>
                <option value="4">Level 4</option>
            </select>

            <label for="semester">Semester</label>
            <select id="semester" name="SelectedSemester">
                <option value="" hidden>-- Select Semester --</option>
                <option value="1">Semester 1</option>
                <option value="2">Semester 2</option>
                <option value="3">Semester 3</option>
            </select>

            <label for="courses">Courses</label>
            <select id="courses" multiple>
                <option value="" hidden>-- Select Courses --</option>
            </select>

            <h3>Selected Courses</h3>
            <table id="selectedCoursesTable">
                <thead>
                    <tr>
                        <th>Course Name</th>
                        <th>Credit Hours</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

            <!-- Hidden inputs for selected courses -->
            <div id="hiddenCoursesContainer"></div>

            <button type="submit" id="submit">Submit</button>
        </form>
    </div>

    <script>
        const departmentSelect = document.getElementById("department");
        const levelSelect = document.getElementById("level");
        const semesterSelect = document.getElementById("semester");
        const coursesSelect = document.getElementById("courses");
        const tableBody = document.querySelector("#selectedCoursesTable tbody");
        const hiddenContainer = document.getElementById("hiddenCoursesContainer");
        let selectedCoursesList = [];
        let availableCourses = [];

        // Fetch courses when criteria change
        function updateCourses() {
            const dept = departmentSelect.value;
            const level = levelSelect.value;
            const semester = semesterSelect.value;

            coursesSelect.innerHTML = '<option value="" hidden>-- Select Courses --</option>';

            if (dept && level && semester) {
                fetch(`/Course/GetCourses?department=${encodeURIComponent(dept)}&semester=${semester}&year=${level}`)
                    .then(response => response.json())
                    .then(data => {
                        availableCourses = data;
                        availableCourses.forEach(course => {
                            const option = document.createElement("option");
                            option.value = course.name;
                            option.textContent = `${course.name} (${course.credits} hrs)`;
                            coursesSelect.appendChild(option);
                        });
                    })
                    .catch(error => console.error('Error fetching courses:', error));
            }
        }

        departmentSelect.addEventListener("change", updateCourses);
        levelSelect.addEventListener("change", updateCourses);
        semesterSelect.addEventListener("change", updateCourses);

        // Handle course selection
        coursesSelect.addEventListener("change", () => {
            const newlySelected = Array.from(coursesSelect.selectedOptions).map(opt => opt.value);
            newlySelected.forEach(courseName => {
                const courseObj = availableCourses.find(c => c.name === courseName);
                if (courseObj && !selectedCoursesList.some(c => c.name === courseName)) {
                    selectedCoursesList.push(courseObj);
                    coursesSelect.removeChild(coursesSelect.querySelector(`option[value="${courseName}"]`));
                }
            });
            updateSelectedCoursesTable();
        });

        // Update the selected courses table
        function updateSelectedCoursesTable() {
            tableBody.innerHTML = "";
            let totalCredits = 0;
            selectedCoursesList.forEach(course => {
                totalCredits += course.credits;
                const row = `<tr><td>${course.name}</td><td>${course.credits}</td></tr>`;
                tableBody.innerHTML += row;
            });
            const totalRow = `<tr><td><strong>Total</strong></td><td><strong>${totalCredits}</strong></td></tr>`;
            tableBody.innerHTML += totalRow;
        }

        // Handle form submission
        document.getElementById("enrollForm").addEventListener("submit", function(e) {
            e.preventDefault();
            hiddenContainer.innerHTML = '';

            // Add hidden inputs for each selected course
            selectedCoursesList.forEach(course => {
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = "SelectedCourses";
                input.value = course.name;
                hiddenContainer.appendChild(input);
            });

            // Submit the form
            this.submit();
        });
    </script>
</body>
</html>